extends CharacterBody3D

# ==================================================================
# --- WALL RUNNING ---
# ==================================================================
@export var WALL_RUN_SPEED: float = 50.0
@export var WALL_RUN_TIME: float = 1000.0  # Time before wall running stops automatically
var is_wall_running: bool = false
var wall_normal: Vector3 = Vector3()
var wall_run_timer: float = 0.0

# ==================================================================
# --- PLAYER MOVEMENT ---
# ==================================================================
@export var WALK_SPEED: float = 5.0
@export var CROUCH_SPEED: float = 3.0
@export var SPRINT_SPEED: float = 8.0
@export var JUMP_VELOCITY: float = 4.8
@export var acceleration: float = 7.0
@export var air_acceleration: float = 3.0
var speed: float = WALK_SPEED

# ==================================================================
# --- CAMERA SETTINGS ---
# ==================================================================
@export var sensitivity: float = 0.1  # Mouse sensitivity
@export var invert_y: bool = false   # Invert Y axis if needed
var is_first_person: bool = true
var rotation_x: float = 0.0  # Vertical rotation limit

# ==================================================================
# --- CAMERA SHAKE ---
# ==================================================================
@export var SHAKE_INTENSITY_WALK: float = 0.0005
@export var SHAKE_INTENSITY_SPRINT: float = 0.01
var shake_amount: float = 0.0
var shake_target: Vector3 = Vector3.ZERO
var shake_offset: Vector3 = Vector3.ZERO
var rng: RandomNumberGenerator = RandomNumberGenerator.new()

# ==================================================================
# --- FIELD OF VIEW (FOV) SETTINGS ---
# ==================================================================
@export var normal_fov: float = 70.0  # Default FOV
@export var sprint_fov: float = 85.0  # FOV when sprinting
@export var BASE_FOV: float = 75.0
@export var FOV_CHANGE: float = 1.5

# ==================================================================
# --- HEAD BOBBING ---
# ==================================================================
@export var BOB_FREQ: float = 2.4
@export var BOB_AMP: float = 0.08
var t_bob: float = 0.0

# ==================================================================
# --- GRAVITY ---
# ==================================================================
var gravity: float = 9.8

# ==================================================================
# --- WALL DETECTION SETTINGS ---
# ==================================================================
@export var wall_check_distance: float = 1.5  # Adjust as needed

# ==================================================================
# --- GUN SYSTEM ---
# ==================================================================
@export var is_reloading: bool = false
@onready var shot_counter = $ShotCounter

# ==================================================================
# --- ANIMATIONS ---
# ==================================================================
@onready var CharacterAnimation: AnimationPlayer = $Gun/OtherGunAnimation
@onready var GunAnimation1: AnimationPlayer = $AuxScene/Shoot_Reload
@onready var Emotes: AnimationPlayer = $AuxScene/Emotes
@onready var ReloadSpecificAnimation: AnimationPlayer = $AuxScene/Shoot_Reload

# ==================================================================
# --- CAMERA NODES ---
# ==================================================================
@onready var third_person_camera: Camera3D = $"3rdPersonCamera"
@onready var head: Node3D = $Head
@onready var Camera: Camera3D = $Head/Camera3D

#====================================================================================================================================

# ==================================================================
# --- INPUT HANDLING ---
# ==================================================================
func _input(event):
	if event is InputEventKey and event.pressed:
		if Input.is_action_just_pressed("SwitchCamera"):
			toggle_camera()
	
	# Handle mouse motion input for camera rotation
	if event is InputEventMouseMotion:
		rotate_camera(event.relative)

# Handles alternative camera rotation logic
func _unhandled_input(event):
	if event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		head.rotate_y(-event.relative.x * sensitivity)
		Camera.rotate_x(-event.relative.y * sensitivity)
		Camera.rotation.x = clamp(Camera.rotation.x, deg_to_rad(-40), deg_to_rad(60))

# ==================================================================
# --- CAMERA MOVEMENT & TOGGLES ---
# ==================================================================
func rotate_camera(relative_motion: Vector2):
	var mouse_x = -relative_motion.x * sensitivity
	var mouse_y = relative_motion.y * sensitivity * (1 if invert_y else -1)  # Fixed inversion logic

	# Rotate horizontally (yaw) on the Y axis
	rotate_y(deg_to_rad(mouse_x))

	# Rotate vertically (pitch) on X axis, clamp to avoid flipping
	rotation_x = clamp(rotation_x + mouse_y, -90, 90)
	Camera.rotation_degrees.x = rotation_x

func toggle_camera():
	if is_first_person:
		# Switch to third-person camera
		Camera.visible = false
		third_person_camera.visible = true
	else:
		# Switch to first-person camera
		Camera.visible = true
		third_person_camera.visible = false
	
	# Toggle the mode flag
	is_first_person = !is_first_person

# ==================================================================
# --- PLAYER MOVEMENT ---
# ==================================================================
func _physics_process(delta):
	# Apply gravity if not on the floor
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle wall run check
	wall_run_check()

	# Process movement direction based on input
	apply_movement(delta)

	# Handle FOV change while sprinting
	adjust_fov(delta)

	# Handle Jump
	if Input.is_action_just_pressed("Jump") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Handle Sprinting
	handle_sprint()

	# Apply head bobbing
	t_bob += delta * velocity.length() * float(is_on_floor())
	Camera.transform.origin = _headbob(t_bob) + _bodycam_shake(delta)

	# Check for reload
	if shot_counter.increment_shot():
		start_reload()

	move_and_slide()

# ==================================================================
# --- MOVEMENT HELPERS ---
# ==================================================================
func apply_movement(delta):
	var input_dir = Input.get_vector("Move_Left", "Move_Right", "Move_Forward", "Move_Back")
	var direction = Vector3(input_dir.x, 0, input_dir.y).normalized()

	# Get camera basis for proper movement direction
	var camera_basis = head.get_global_transform().basis
	var forward_dir = camera_basis.z.normalized()
	var right_dir = camera_basis.x.normalized()

	# Final movement direction relative to camera
	var final_dir = (right_dir * direction.x + forward_dir * direction.z).normalized()

	# Handle Wall Running
	if is_wall_running:
		apply_wall_run_movement(delta)
	else:
		apply_standard_movement(delta, final_dir)

func apply_standard_movement(delta, final_dir):
	if is_on_floor():
		var target_speed = SPRINT_SPEED if Input.is_action_pressed("Sprint") else WALK_SPEED
		speed = lerp(speed, target_speed, delta * acceleration)
		if final_dir != Vector3.ZERO:
			velocity.x = final_dir.x * speed
			velocity.z = final_dir.z * speed
		else:
			velocity.x = lerp(velocity.x, 0.0, delta * acceleration)
			velocity.z = lerp(velocity.z, 0.0, delta * acceleration)
	else:
		velocity.x = lerp(velocity.x, final_dir.x * speed, delta * air_acceleration)
		velocity.z = lerp(velocity.z, final_dir.z * speed, delta * air_acceleration)

func apply_wall_run_movement(delta):
	# Apply wall running movement
	var wall_dir = wall_normal.cross(Vector3.UP).normalized()
	velocity.x = wall_dir.x * WALL_RUN_SPEED
	velocity.z = wall_dir.z * WALL_RUN_SPEED

	wall_run_timer -= delta
	if wall_run_timer <= 0:
		is_wall_running = false

func handle_sprint():
	if Input.is_action_just_pressed("Sprint") and Input.is_action_pressed("Move_Forward"):
		speed = SPRINT_SPEED
		shake_amount = SHAKE_INTENSITY_SPRINT
	elif Input.is_action_just_released("Sprint"):
		speed = WALK_SPEED
		shake_amount = SHAKE_INTENSITY_WALK

# ==================================================================
# --- CAMERA EFFECTS ---
# ==================================================================
func adjust_fov(delta):
	var target_fov = sprint_fov if Input.is_action_pressed("Sprint") else normal_fov
	
	# FOV adjustment
	var _velocity_clamped = clamp(velocity.length(), 0.5, SPRINT_SPEED * 2)
	Camera.fov = lerp(Camera.fov, target_fov, delta * 8.0)
	
#====================================================================================================================================

# ==================================================================
# --- WALL RUN DETECTION ---
# ==================================================================
func wall_run_check():
	var wall_ray_start = global_transform.origin
	var wall_ray_end = wall_ray_start + velocity.normalized() * wall_check_distance
	var space_state = get_world_3d().direct_space_state

	var query = PhysicsRayQueryParameters3D.new()
	query.from = wall_ray_start
	query.to = wall_ray_end
	query.exclude = [self]  

	var result = space_state.intersect_ray(query)

	if result:
		if !is_wall_running and Input.is_action_pressed("Move_Forward"):
			is_wall_running = true
			wall_normal = result.normal
			wall_run_timer = WALL_RUN_TIME
	else:
		is_wall_running = false

# ==================================================================
# --- RELOADING ---
# ==================================================================
func start_reload():
	is_reloading = true
	ReloadSpecificAnimation.play("Reload")
	var reload_duration = ReloadSpecificAnimation.get_animation("Reload").length
	await get_tree().create_timer(reload_duration).timeout
	is_reloading = false

# ==================================================================
# --- CAMERA EFFECTS (HEADBOB & SHAKE) ---
# ==================================================================
func _headbob(time) -> Vector3:
	return Vector3(
		cos(time * BOB_FREQ / 2) * BOB_AMP,
		sin(time * BOB_FREQ) * BOB_AMP,
		0
	)

func _bodycam_shake(delta: float) -> Vector3:
	if velocity.length() > 0 and is_on_floor():
		shake_target.x = rng.randf_range(-shake_amount, shake_amount)
		shake_target.y = rng.randf_range(-shake_amount, shake_amount)
		shake_offset = lerp(shake_offset, shake_target, delta * 5.0)
	else:
		shake_offset = lerp(shake_offset, Vector3.ZERO, delta * 5.0)
	return shake_offset

# ==================================================================
# --- ANIMATIONS ---
# ==================================================================
func _process(_delta) -> void:
	handle_zoom_animation()
	handle_run_animation()
	handle_shoot_animation()
	handle_movement_animation()

func handle_zoom_animation():
	if Input.is_action_just_pressed("Zoom"):
		CharacterAnimation.play("Zoom")
	elif Input.is_action_just_released("Zoom"):
		CharacterAnimation.play("UnZoom")
		if CharacterAnimation.current_animation == "UnZoom" and CharacterAnimation.animation_finished:
			CharacterAnimation.play("Idle")

func handle_run_animation():
	if Input.is_action_just_pressed("Sprint"):
		CharacterAnimation.play("Running")
	elif Input.is_action_just_released("Sprint"):
		CharacterAnimation.play("UnRunning")
		if CharacterAnimation.current_animation == "UnRunning" and CharacterAnimation.animation_finished:
			CharacterAnimation.play("Idle")

func handle_shoot_animation():
	if Input.is_action_just_pressed("Shoot") and not is_reloading:
		GunAnimation1.play("Shoot")
	elif Input.is_action_just_released("Shoot"):
		CharacterAnimation.play("Idle")

func handle_movement_animation():
	if Input.get_vector("Move_Left", "Move_Right", "Move_Forward", "Move_Back"):
		Emotes.play("HappyWalk")
	else:
		Emotes.play("HappyIdle")
